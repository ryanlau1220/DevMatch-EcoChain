// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
  Int8,
} from "@graphprotocol/graph-ts";

export class EnvironmentalData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EnvironmentalData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EnvironmentalData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("EnvironmentalData", id.toString(), this);
    }
  }

  static loadInBlock(id: string): EnvironmentalData | null {
    return changetype<EnvironmentalData | null>(
      store.get_in_block("EnvironmentalData", id),
    );
  }

  static load(id: string): EnvironmentalData | null {
    return changetype<EnvironmentalData | null>(
      store.get("EnvironmentalData", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sensorId(): string {
    let value = this.get("sensorId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set sensorId(value: string) {
    this.set("sensorId", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get temperature(): BigInt {
    let value = this.get("temperature");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set temperature(value: BigInt) {
    this.set("temperature", Value.fromBigInt(value));
  }

  get humidity(): BigInt {
    let value = this.get("humidity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set humidity(value: BigInt) {
    this.set("humidity", Value.fromBigInt(value));
  }

  get airQuality(): BigInt {
    let value = this.get("airQuality");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set airQuality(value: BigInt) {
    this.set("airQuality", Value.fromBigInt(value));
  }

  get pressure(): BigInt {
    let value = this.get("pressure");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set pressure(value: BigInt) {
    this.set("pressure", Value.fromBigInt(value));
  }

  get location(): string {
    let value = this.get("location");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set location(value: string) {
    this.set("location", Value.fromString(value));
  }

  get verified(): boolean {
    let value = this.get("verified");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set verified(value: boolean) {
    this.set("verified", Value.fromBoolean(value));
  }

  get verificationTimestamp(): BigInt | null {
    let value = this.get("verificationTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set verificationTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("verificationTimestamp");
    } else {
      this.set("verificationTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get tokenMetadata(): string | null {
    let value = this.get("tokenMetadata");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenMetadata(value: string | null) {
    if (!value) {
      this.unset("tokenMetadata");
    } else {
      this.set("tokenMetadata", Value.fromString(<string>value));
    }
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }
}

export class VirtualSensor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VirtualSensor entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VirtualSensor must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("VirtualSensor", id.toString(), this);
    }
  }

  static loadInBlock(id: string): VirtualSensor | null {
    return changetype<VirtualSensor | null>(
      store.get_in_block("VirtualSensor", id),
    );
  }

  static load(id: string): VirtualSensor | null {
    return changetype<VirtualSensor | null>(store.get("VirtualSensor", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sensorAddress(): string {
    let value = this.get("sensorAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set sensorAddress(value: string) {
    this.set("sensorAddress", Value.fromString(value));
  }

  get sensorType(): string {
    let value = this.get("sensorType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set sensorType(value: string) {
    this.set("sensorType", Value.fromString(value));
  }

  get location(): string {
    let value = this.get("location");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set location(value: string) {
    this.set("location", Value.fromString(value));
  }

  get registrationTimestamp(): BigInt {
    let value = this.get("registrationTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set registrationTimestamp(value: BigInt) {
    this.set("registrationTimestamp", Value.fromBigInt(value));
  }

  get isActive(): boolean {
    let value = this.get("isActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isActive(value: boolean) {
    this.set("isActive", Value.fromBoolean(value));
  }

  get totalReadings(): BigInt {
    let value = this.get("totalReadings");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalReadings(value: BigInt) {
    this.set("totalReadings", Value.fromBigInt(value));
  }

  get tokenMetadata(): string | null {
    let value = this.get("tokenMetadata");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenMetadata(value: string | null) {
    if (!value) {
      this.unset("tokenMetadata");
    } else {
      this.set("tokenMetadata", Value.fromString(<string>value));
    }
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }
}

export class VerifiedReading extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VerifiedReading entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VerifiedReading must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("VerifiedReading", id.toString(), this);
    }
  }

  static loadInBlock(id: string): VerifiedReading | null {
    return changetype<VerifiedReading | null>(
      store.get_in_block("VerifiedReading", id),
    );
  }

  static load(id: string): VerifiedReading | null {
    return changetype<VerifiedReading | null>(store.get("VerifiedReading", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get readingId(): string {
    let value = this.get("readingId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set readingId(value: string) {
    this.set("readingId", Value.fromString(value));
  }

  get verificationTimestamp(): BigInt {
    let value = this.get("verificationTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set verificationTimestamp(value: BigInt) {
    this.set("verificationTimestamp", Value.fromBigInt(value));
  }

  get verifierAddress(): string {
    let value = this.get("verifierAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set verifierAddress(value: string) {
    this.set("verifierAddress", Value.fromString(value));
  }

  get verificationMethod(): string {
    let value = this.get("verificationMethod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set verificationMethod(value: string) {
    this.set("verificationMethod", Value.fromString(value));
  }

  get tokenMetadata(): string | null {
    let value = this.get("tokenMetadata");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenMetadata(value: string | null) {
    if (!value) {
      this.unset("tokenMetadata");
    } else {
      this.set("tokenMetadata", Value.fromString(<string>value));
    }
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }
}

export class TokenMetadata extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenMetadata entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenMetadata must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TokenMetadata", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TokenMetadata | null {
    return changetype<TokenMetadata | null>(
      store.get_in_block("TokenMetadata", id),
    );
  }

  static load(id: string): TokenMetadata | null {
    return changetype<TokenMetadata | null>(store.get("TokenMetadata", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenAddress(): string {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tokenAddress(value: string) {
    this.set("tokenAddress", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get price(): BigDecimal | null {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set price(value: BigDecimal | null) {
    if (!value) {
      this.unset("price");
    } else {
      this.set("price", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get priceSource(): string {
    let value = this.get("priceSource");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set priceSource(value: string) {
    this.set("priceSource", Value.fromString(value));
  }

  get lastUpdated(): BigInt {
    let value = this.get("lastUpdated");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastUpdated(value: BigInt) {
    this.set("lastUpdated", Value.fromBigInt(value));
  }

  get environmentalContext(): string | null {
    let value = this.get("environmentalContext");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set environmentalContext(value: string | null) {
    if (!value) {
      this.unset("environmentalContext");
    } else {
      this.set("environmentalContext", Value.fromString(<string>value));
    }
  }

  get marketCap(): BigDecimal | null {
    let value = this.get("marketCap");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set marketCap(value: BigDecimal | null) {
    if (!value) {
      this.unset("marketCap");
    } else {
      this.set("marketCap", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get volume24h(): BigDecimal | null {
    let value = this.get("volume24h");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set volume24h(value: BigDecimal | null) {
    if (!value) {
      this.unset("volume24h");
    } else {
      this.set("volume24h", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get tokenApiVersion(): string | null {
    let value = this.get("tokenApiVersion");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenApiVersion(value: string | null) {
    if (!value) {
      this.unset("tokenApiVersion");
    } else {
      this.set("tokenApiVersion", Value.fromString(<string>value));
    }
  }

  get fallbackSubgraph(): string | null {
    let value = this.get("fallbackSubgraph");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set fallbackSubgraph(value: string | null) {
    if (!value) {
      this.unset("fallbackSubgraph");
    } else {
      this.set("fallbackSubgraph", Value.fromString(<string>value));
    }
  }
}

export class EnvironmentalStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EnvironmentalStats entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EnvironmentalStats must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("EnvironmentalStats", id.toString(), this);
    }
  }

  static loadInBlock(id: string): EnvironmentalStats | null {
    return changetype<EnvironmentalStats | null>(
      store.get_in_block("EnvironmentalStats", id),
    );
  }

  static load(id: string): EnvironmentalStats | null {
    return changetype<EnvironmentalStats | null>(
      store.get("EnvironmentalStats", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalReadings(): BigInt {
    let value = this.get("totalReadings");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalReadings(value: BigInt) {
    this.set("totalReadings", Value.fromBigInt(value));
  }

  get totalSensors(): BigInt {
    let value = this.get("totalSensors");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalSensors(value: BigInt) {
    this.set("totalSensors", Value.fromBigInt(value));
  }

  get averageTemperature(): BigDecimal | null {
    let value = this.get("averageTemperature");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set averageTemperature(value: BigDecimal | null) {
    if (!value) {
      this.unset("averageTemperature");
    } else {
      this.set("averageTemperature", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get averageAirQuality(): BigDecimal | null {
    let value = this.get("averageAirQuality");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set averageAirQuality(value: BigDecimal | null) {
    if (!value) {
      this.unset("averageAirQuality");
    } else {
      this.set("averageAirQuality", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get totalVerifiedReadings(): BigInt {
    let value = this.get("totalVerifiedReadings");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalVerifiedReadings(value: BigInt) {
    this.set("totalVerifiedReadings", Value.fromBigInt(value));
  }

  get lastUpdated(): BigInt {
    let value = this.get("lastUpdated");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastUpdated(value: BigInt) {
    this.set("lastUpdated", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }
}

export class TokenApiStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenApiStats entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenApiStats must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TokenApiStats", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TokenApiStats | null {
    return changetype<TokenApiStats | null>(
      store.get_in_block("TokenApiStats", id),
    );
  }

  static load(id: string): TokenApiStats | null {
    return changetype<TokenApiStats | null>(store.get("TokenApiStats", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalTokenApiCalls(): BigInt {
    let value = this.get("totalTokenApiCalls");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTokenApiCalls(value: BigInt) {
    this.set("totalTokenApiCalls", Value.fromBigInt(value));
  }

  get totalFallbackCalls(): BigInt {
    let value = this.get("totalFallbackCalls");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalFallbackCalls(value: BigInt) {
    this.set("totalFallbackCalls", Value.fromBigInt(value));
  }

  get successRate(): BigDecimal | null {
    let value = this.get("successRate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set successRate(value: BigDecimal | null) {
    if (!value) {
      this.unset("successRate");
    } else {
      this.set("successRate", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get lastTokenApiCall(): BigInt | null {
    let value = this.get("lastTokenApiCall");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastTokenApiCall(value: BigInt | null) {
    if (!value) {
      this.unset("lastTokenApiCall");
    } else {
      this.set("lastTokenApiCall", Value.fromBigInt(<BigInt>value));
    }
  }

  get lastFallbackCall(): BigInt | null {
    let value = this.get("lastFallbackCall");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastFallbackCall(value: BigInt | null) {
    if (!value) {
      this.unset("lastFallbackCall");
    } else {
      this.set("lastFallbackCall", Value.fromBigInt(<BigInt>value));
    }
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }
}
